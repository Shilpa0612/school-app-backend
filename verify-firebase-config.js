import dotenv from 'dotenv';
import admin from 'firebase-admin';

dotenv.config();

async function verifyFirebaseConfig() {
    try {
        console.log('üîç Verifying Firebase Configuration');
        console.log('==================================');
        console.log('');

        // Check environment variables
        console.log('1. Environment Variables:');
        console.log(`   FIREBASE_PROJECT_ID: ${process.env.FIREBASE_PROJECT_ID}`);
        console.log(`   FIREBASE_CLIENT_EMAIL: ${process.env.FIREBASE_CLIENT_EMAIL}`);
        console.log(`   FIREBASE_PRIVATE_KEY_ID: ${process.env.FIREBASE_PRIVATE_KEY_ID ? 'Set' : 'Missing'}`);
        console.log(`   FIREBASE_PRIVATE_KEY: ${process.env.FIREBASE_PRIVATE_KEY ? 'Set' : 'Missing'}`);
        console.log('');

        // Initialize Firebase Admin SDK
        console.log('2. Initializing Firebase Admin SDK...');
        try {
            const serviceAccount = {
                type: "service_account",
                project_id: process.env.FIREBASE_PROJECT_ID,
                private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
                private_key: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
                client_email: process.env.FIREBASE_CLIENT_EMAIL,
                client_id: process.env.FIREBASE_CLIENT_ID,
                auth_uri: "https://accounts.google.com/o/oauth2/auth",
                token_uri: "https://oauth2.googleapis.com/token",
                auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
                client_x509_cert_url: process.env.FIREBASE_CLIENT_CERT_URL
            };

            if (!admin.apps.length) {
                const app = admin.initializeApp({
                    credential: admin.credential.cert(serviceAccount),
                    projectId: process.env.FIREBASE_PROJECT_ID
                });
                console.log('   ‚úÖ Firebase Admin SDK initialized successfully');
            } else {
                console.log('   ‚úÖ Firebase Admin SDK already initialized');
            }

            // Test FCM with a dummy token to see the exact error
            console.log('');
            console.log('3. Testing FCM with dummy token...');
            const dummyToken = 'dummy_token_for_testing';

            try {
                await admin.messaging().send({
                    token: dummyToken,
                    notification: {
                        title: 'Test',
                        body: 'Test message'
                    }
                });
            } catch (error) {
                console.log(`   Error type: ${error.code}`);
                console.log(`   Error message: ${error.message}`);

                if (error.code === 'messaging/mismatched-credential') {
                    console.log('   üö® SENDERID MISMATCH DETECTED');
                    console.log('   This means your backend Firebase project does not match');
                    console.log('   the project that generated the device tokens in your database.');
                }
            }

        } catch (error) {
            console.log('   ‚ùå Firebase Admin SDK initialization failed:', error.message);
        }

        console.log('');
        console.log('4. Solution:');
        console.log('   The SenderId mismatch means:');
        console.log('   - Your backend uses Firebase Project A');
        console.log('   - Your device tokens were generated by Firebase Project B');
        console.log('   - FCM cannot send messages from Project A to Project B tokens');
        console.log('');
        console.log('   To fix:');
        console.log('   1. Check if device tokens in database are from correct project');
        console.log('   2. If using mobile app, ensure google-services.json matches backend project');
        console.log('   3. Re-register device tokens after fixing configuration');

    } catch (error) {
        console.error('‚ùå Verification failed:', error);
    }
}

verifyFirebaseConfig();
